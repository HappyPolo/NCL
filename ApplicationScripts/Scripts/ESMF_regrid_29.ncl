;======================================================================
; ESMF_regrid_29.ncl
;
; Concepts illustrated:
;   - Regrid a WRF grid to a rectilinear grid
;   - Regrid a rectilinear grid back to the original WRF grid
;   - Generate weights files for regridding use later.
;======================================================================
; This example produces no graphics. See ESMF_wgts_29.ncl for 
; a script that uses the weights files generated by this script and
; also generates graphics.
;======================================================================
; These files are loaded by default in NCL V6.2.0 and newer
; load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl"
; load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
; load "$NCARG_ROOT/lib/ncarg/nclscripts/wrf/WRFUserARW.ncl"
;
; This file still has to be loaded manually
load "$NCARG_ROOT/lib/ncarg/nclscripts/esmf/ESMF_regridding.ncl"

begin
;======================================================================
; Part A: Generate WRF to Rectilinear regrid weights 
;======================================================================

    InterpMethod= "patch"

;---Input file
    srcDirName  = "./"
    srcFileName = "wrfout_d01_2003-07-13_12:00:00"
    srcFilePath =  srcDirName + srcFileName

;---Retrieve either one level, or all levels. Use '-1' for all.
    sfile = addfile(srcFilePath,"r")

;---Get the variable to be regridded               
    UM   = wrf_user_getvar(sfile,"ua",0)     ; On mass grid 
    printVarSummary(UM)                      ; (bottom_top,south_north,west_east)

    ua   = UM(0,:,:)                         ; (south_north,west_east)
                                             ; only need 'horizontal' spatial points 
    printVarSummary(ua)                      ; (bottom_top,south_north,west_east)
    printMinMax(ua,0)

    delete(UM)                               ; no longer needed

;---Get the source lat/lon grid (mass grid)
    lat2d = sfile->XLAT(0,:,:)               ; (south_north,west_east)
    lon2d = sfile->XLONG(0,:,:)

    dims  = dimsizes(lat2d)
    nlat  = dims(0)
    nlon  = dims(1)

;---Create the destination rectilinear lat[*]/lon[*] arrays
    lat = fspan(min(lat2d), max(lat2d) ,nlat)
    lon = fspan(min(lon2d), max(lon2d) ,nlon)

;---Set up options for regridding
    Opt                = True
    Opt@SrcTitle       = "WRF grid"   ; optional
    Opt@WgtFileName    = "WRF_to_Rect.WgtFile_"+InterpMethod+".nc"

;---Source grid options
    Opt@SrcFileName    = "WRF.SCRIP_grid_description.nc"         ; Name of source and
    Opt@SrcRegional    = True
    Opt@SrcGridLat     = lat2d
    Opt@SrcGridLon     = lon2d

;---Destination grid options
    Opt@DstFileName    = "Rectilinear.SCRIP_grid_description.nc" ; destination files
    Opt@DstGridType    = "rectilinear"
    Opt@DstGridLat     = lat
    Opt@DstGridLon     = lon
    Opt@DstRegional    = True

;---Specify other options  
    Opt@ForceOverwrite = True
    Opt@InterpMethod   = InterpMethod

;---Perform the regrid: WRF ==> rectilinear (_reclin)
    ua_reclin = ESMF_regrid(ua, Opt)     ; Do the regridding for ua   

;---Reset 0 values to missing values.
    ua_reclin@_FillValue     = default_fillvalue(typeof(ua_reclin))
    ua_reclin                = where(ua_reclin.eq.0.0,ua_reclin@_FillValue,\
                                     ua_reclin)

;---Print rectilinear variable information
    printVarSummary(ua_reclin)
    print("ua_reclin: min="+min(ua_reclin)+"   max="+max(ua_reclin))
    nmsg = num(ismissing(ua_reclin))
    print("nmsgRectilinearGrid="+nmsg)

;======================================================================
; Part B: Generate Rectilinear to WRF regrid weights 
;======================================================================

;---For clarity, delete the above options and start again.
    delete(Opt)

;---Options for regridding rectilinear to WRF (curvilinear) grid
    Opt                 = True

;   The grid descriptions have been generated in 'Part A'
;   but we still need to provide their names.
    Opt@SkipSrcGrid     = True
    Opt@SkipDstGrid     = True
    Opt@DstFileName     = "WRF.SCRIP_grid_description.nc"         ; Name of source and
    Opt@SrcFileName     = "Rectilinear.SCRIP_grid_description.nc" ; destination files
    Opt@ForceOverwrite  = True

    Opt@SrcTitle        = srcFileName                  ; source grid
    Opt@SrcMask2D       = where(ismissing(ua_reclin),0,1)
    Opt@SrcRegional     = True

    Opt@DstGridType     = "curvilinear"
    Opt@DstTitle        = "Rectilinear_to_WRF"
    Opt@DstRegional     = True

    Opt@InterpMethod    = InterpMethod
    Opt@WgtFileName     = "Rect_to_WRF.WgtFile_"+InterpMethod+".nc"

    ua_regrid           = ESMF_regrid(ua_reclin,Opt)

;---Print regridded WRF variable information
    printVarSummary(ua_regrid)
    printMinMax(ua_regrid)
    nmsg = num(ismissing(ua_regrid))
    print("# missing in regridded WRF grid="+nmsg)


;************************************************
; create coordinate meta data for rectilinear grid. Needed for plotting.
;************************************************
    lat!0      = "lat"
    lat@units  = "degrees_north"
    
    lon!0      = "lon"
    lon@units  = "degrees_east"
    
    div_rl!0   = "Time"
    div_rl!1   = "bottom_top"
    div_rl!2   = "lat"
    div_rl!3   = "lon"
    div_rl&lat =  lat
    div_rl&lon =  lon
  
;************************************************
; create plots: Note some defaults changed in NCL v6.1.0
;************************************************  
    wks = gsn_open_wks("png","ESMF_regrid")    ; send graphics to PNG file

    plot = new(2,graphic)                      ; create a plot array
    
    res                      = True
    res@gsnDraw              = False           ; don't draw
    res@gsnFrame             = False           ; don't advance frame
    res@gsnAddCyclic         = False           ; regional data
  
    res@cnInfoLabelOn        = False           ; turn off cn info label
    res@cnFillOn             = True            ; turn on color
   ;res@cnFillMode           = "RasterFill"
    res@cnLinesOn            = False
    res@cnLineLabelsOn       = False
    res@lbLabelBarOn         = False           ; turn off individual cb's
  
    res@cnLevelSelectionMode =  "ManualLevels"   
    res@cnMinLevelValF       = -4.5e-05
    res@cnMaxLevelValF       =  abs(res@cnMinLevelValF)
    res@cnLevelSpacingF      =  0.25e-05 
    
    res@mpMinLatF            = min(lat2d)      ; range to zoom in on
    res@mpMaxLatF            = max(lat2d)
    res@mpMinLonF            = min(lon2d)
    res@mpMaxLonF            = max(lon2d)
    
    res@gsnLeftString = ""
    res@gsnRightString= ""
      
    nt = 3                   ; arbitrary time
    kl = 20                  ; arbitrary level
    
    plot(0) = gsn_csm_contour_map(wks,div_rl(nt,kl,:,:) ,res) 
    plot(1) = gsn_csm_contour_map(wks,div_wrf(nt,kl,:,:),res) 

;************************************************
; create panel
;************************************************
    resP                     = True                ; modify the panel plot
    resP@txString            = "Divergence: Rectilinear (top); WRF (Bot)"
    resP@gsnMaximize         = True                ; make ps, eps, pdf large
    resP@gsnPanelLabelBar    = True                ; add common colorbar
    gsn_panel(wks,plot,(/2,1/),resP)               ; now draw as one plot
end

